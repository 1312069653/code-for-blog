// Code generated by protoc-gen-go.
// source: stringdb.proto
// DO NOT EDIT!

/*
Package stringdb is a generated protocol buffer package.

It is generated from these files:
	stringdb.proto

It has these top-level messages:
	GetValueRequest
	GetValueReply
	SetValueRequest
	SetValueReply
	CountValueRequest
	CountValueReply
*/
package stringdb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type GetValueRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *GetValueRequest) Reset()                    { *m = GetValueRequest{} }
func (m *GetValueRequest) String() string            { return proto.CompactTextString(m) }
func (*GetValueRequest) ProtoMessage()               {}
func (*GetValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetValueReply struct {
	// Empty string returned when key not found on the server.
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *GetValueReply) Reset()                    { *m = GetValueReply{} }
func (m *GetValueReply) String() string            { return proto.CompactTextString(m) }
func (*GetValueReply) ProtoMessage()               {}
func (*GetValueReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SetValueRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SetValueRequest) Reset()                    { *m = SetValueRequest{} }
func (m *SetValueRequest) String() string            { return proto.CompactTextString(m) }
func (*SetValueRequest) ProtoMessage()               {}
func (*SetValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SetValueReply struct {
	// Returns the value.
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *SetValueReply) Reset()                    { *m = SetValueReply{} }
func (m *SetValueReply) String() string            { return proto.CompactTextString(m) }
func (*SetValueReply) ProtoMessage()               {}
func (*SetValueReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CountValueRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *CountValueRequest) Reset()                    { *m = CountValueRequest{} }
func (m *CountValueRequest) String() string            { return proto.CompactTextString(m) }
func (*CountValueRequest) ProtoMessage()               {}
func (*CountValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type CountValueReply struct {
	// Returns the size of the value, in bytes. If key isn't found on the server,
	// returns -1.
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *CountValueReply) Reset()                    { *m = CountValueReply{} }
func (m *CountValueReply) String() string            { return proto.CompactTextString(m) }
func (*CountValueReply) ProtoMessage()               {}
func (*CountValueReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*GetValueRequest)(nil), "stringdb.GetValueRequest")
	proto.RegisterType((*GetValueReply)(nil), "stringdb.GetValueReply")
	proto.RegisterType((*SetValueRequest)(nil), "stringdb.SetValueRequest")
	proto.RegisterType((*SetValueReply)(nil), "stringdb.SetValueReply")
	proto.RegisterType((*CountValueRequest)(nil), "stringdb.CountValueRequest")
	proto.RegisterType((*CountValueReply)(nil), "stringdb.CountValueReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for StringDb service

type StringDbClient interface {
	// Get the value stored on the server for a given key
	GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueReply, error)
	// Set the server's value for a given key
	SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueReply, error)
	// Count the size of the server's value for a given key
	CountValue(ctx context.Context, in *CountValueRequest, opts ...grpc.CallOption) (*CountValueReply, error)
}

type stringDbClient struct {
	cc *grpc.ClientConn
}

func NewStringDbClient(cc *grpc.ClientConn) StringDbClient {
	return &stringDbClient{cc}
}

func (c *stringDbClient) GetValue(ctx context.Context, in *GetValueRequest, opts ...grpc.CallOption) (*GetValueReply, error) {
	out := new(GetValueReply)
	err := grpc.Invoke(ctx, "/stringdb.StringDb/GetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringDbClient) SetValue(ctx context.Context, in *SetValueRequest, opts ...grpc.CallOption) (*SetValueReply, error) {
	out := new(SetValueReply)
	err := grpc.Invoke(ctx, "/stringdb.StringDb/SetValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stringDbClient) CountValue(ctx context.Context, in *CountValueRequest, opts ...grpc.CallOption) (*CountValueReply, error) {
	out := new(CountValueReply)
	err := grpc.Invoke(ctx, "/stringdb.StringDb/CountValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StringDb service

type StringDbServer interface {
	// Get the value stored on the server for a given key
	GetValue(context.Context, *GetValueRequest) (*GetValueReply, error)
	// Set the server's value for a given key
	SetValue(context.Context, *SetValueRequest) (*SetValueReply, error)
	// Count the size of the server's value for a given key
	CountValue(context.Context, *CountValueRequest) (*CountValueReply, error)
}

func RegisterStringDbServer(s *grpc.Server, srv StringDbServer) {
	s.RegisterService(&_StringDb_serviceDesc, srv)
}

func _StringDb_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringDbServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringdb.StringDb/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringDbServer).GetValue(ctx, req.(*GetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringDb_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringDbServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringdb.StringDb/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringDbServer).SetValue(ctx, req.(*SetValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StringDb_CountValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StringDbServer).CountValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stringdb.StringDb/CountValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StringDbServer).CountValue(ctx, req.(*CountValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StringDb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stringdb.StringDb",
	HandlerType: (*StringDbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetValue",
			Handler:    _StringDb_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _StringDb_SetValue_Handler,
		},
		{
			MethodName: "CountValue",
			Handler:    _StringDb_CountValue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x2e, 0x29, 0xca,
	0xcc, 0x4b, 0x4f, 0x49, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x94,
	0xb9, 0xf8, 0xdd, 0x53, 0x4b, 0xc2, 0x12, 0x73, 0x4a, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b,
	0x4b, 0x84, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40,
	0x4c, 0x25, 0x55, 0x2e, 0x5e, 0x84, 0xa2, 0x82, 0x9c, 0x4a, 0x21, 0x11, 0x2e, 0xd6, 0x32, 0x10,
	0x0f, 0xaa, 0x08, 0xc2, 0x51, 0xb2, 0xe4, 0xe2, 0x0f, 0x26, 0x64, 0x16, 0x42, 0x2b, 0x13, 0xb2,
	0x56, 0xa0, 0x0d, 0xc1, 0x44, 0xd8, 0xa0, 0xca, 0x25, 0xe8, 0x9c, 0x5f, 0x9a, 0x47, 0xc8, 0xbd,
	0xea, 0x5c, 0xfc, 0xc8, 0xca, 0xa0, 0xe6, 0x25, 0x83, 0x84, 0xc0, 0xca, 0x98, 0x83, 0x20, 0x1c,
	0xa3, 0x6b, 0x8c, 0x5c, 0x1c, 0xc1, 0xe0, 0xa0, 0x70, 0x49, 0x12, 0x72, 0xe0, 0xe2, 0x80, 0xf9,
	0x52, 0x48, 0x52, 0x0f, 0x1e, 0x62, 0x68, 0xc1, 0x23, 0x25, 0x8e, 0x4d, 0x0a, 0x68, 0x85, 0x12,
	0x03, 0xc8, 0x84, 0x60, 0x2c, 0x26, 0x04, 0xe3, 0x36, 0x21, 0x18, 0xcd, 0x04, 0x37, 0x2e, 0x2e,
	0x84, 0xcb, 0x85, 0xa4, 0x11, 0x0a, 0x31, 0xbc, 0x2d, 0x25, 0x89, 0x5d, 0x12, 0x6c, 0x4e, 0x12,
	0x1b, 0x38, 0x9e, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xa5, 0x8f, 0x6e, 0xf9, 0x01,
	0x00, 0x00,
}
